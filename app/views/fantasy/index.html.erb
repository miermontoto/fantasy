<div class="flex flex-col">
  <div class="grid gap-y-2 grid-cols-1 md:grid-cols-2 p-2 bg-[#121824] rounded-lg justify-items-stretch">

    <!-- Market Data Section -->
    <div class="grid gap-y-2 grid-cols-1 p-2 order-last md:order-first">
      <div id="left-container">
        <%= render partial: "fantasy/partials/transfer_list", locals: {
          paginated_feed_data: @paginated_feed_data,
          paginated_market_data: @paginated_market_data,
          current_page_feed: @current_page_feed,
          current_page_market: @current_page_market,
          total_pages_feed: @total_pages_feed,
          total_pages_market: @total_pages_market
        } %>
      </div>
    </div>

    <!-- Standings Section -->
    <div class="p-2">
      <h1 class="text-center font-bold text-2xl">CLASIFICACIÃ“N</h1>
      <%= render partial: 'fantasy/partials/standings', locals: { standings: @standings_data } %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const leftContainer = document.getElementById('left-container');
    const pageCache = new Map(); // Cache for prefetched pages

    // Function to get current page number from pagination controls
    function getCurrentPage(type) {
      const currentPageSpan = document.querySelector(`#current-page-${type} .text-xl`);
      return currentPageSpan ? parseInt(currentPageSpan.textContent) : 1;
    }

    // Function to get total pages from pagination controls
    function getTotalPages(type) {
      const span = document.querySelector(`#current-page-${type}`);
      return span ? parseInt(span.dataset.totalpages) : 1;
    }

    // Function to update the page numbers and content after an AJAX load
    function updatePaginationControls(pageFeed, pageMarket, totalPagesFeed, totalPagesMarket) {
      // Update page numbers
      document.getElementById("current-page-feed").innerHTML = `
        <span class="text-xl font-bold">${pageFeed}</span>
        <span class="text-gray-400 mx-2">de</span>
        <span class="text-gray-300">${totalPagesFeed}</span>
      `;
      document.getElementById("current-page-market").innerHTML = `
        <span class="text-xl font-bold">${pageMarket}</span>
        <span class="text-gray-400 mx-2">de</span>
        <span class="text-gray-300">${totalPagesMarket}</span>
      `;

      // Update button states and data attributes for feed pagination
      const firstFeedBtn = document.querySelector('.first-feed');
      const prevFeedBtn = document.querySelector('.previous-feed');
      const nextFeedBtn = document.querySelector('.next-feed');
      const lastFeedBtn = document.querySelector('.last-feed');

      if (firstFeedBtn && prevFeedBtn && nextFeedBtn && lastFeedBtn) {
        const isFirstPage = pageFeed <= 1;
        const isLastPage = pageFeed >= totalPagesFeed;

        firstFeedBtn.disabled = isFirstPage;
        prevFeedBtn.disabled = isFirstPage;
        nextFeedBtn.disabled = isLastPage;
        lastFeedBtn.disabled = isLastPage;

        prevFeedBtn.dataset.page = pageFeed - 1;
        nextFeedBtn.dataset.page = pageFeed + 1;
      }

      // Update button states and data attributes for market pagination
      const firstMarketBtn = document.querySelector('.first-market');
      const prevMarketBtn = document.querySelector('.previous-market');
      const nextMarketBtn = document.querySelector('.next-market');
      const lastMarketBtn = document.querySelector('.last-market');

      if (firstMarketBtn && prevMarketBtn && nextMarketBtn && lastMarketBtn) {
        const isFirstPage = pageMarket <= 1;
        const isLastPage = pageMarket >= totalPagesMarket;

        firstMarketBtn.disabled = isFirstPage;
        prevMarketBtn.disabled = isFirstPage;
        nextMarketBtn.disabled = isLastPage;
        lastMarketBtn.disabled = isLastPage;

        prevMarketBtn.dataset.page = pageMarket - 1;
        nextMarketBtn.dataset.page = pageMarket + 1;
      }
    }

    // Function to fetch page content
    async function fetchPage(pageFeed, pageMarket) {
      const url = `/?page_feed=${pageFeed}&page_market=${pageMarket}`;
      const cacheKey = `${pageFeed}-${pageMarket}`;

      // Return cached content if available
      if (pageCache.has(cacheKey)) {
        return pageCache.get(cacheKey);
      }

      try {
        // Fetch new content
        const response = await fetch(url, {
          headers: { 'X-Requested-With': 'XMLHttpRequest' }
        });
        const html = await response.text();

        // Cache the result
        pageCache.set(cacheKey, html);

        return html;
      } catch (error) {
        console.error('Error fetching page:', error);
        throw error;
      }
    }

    // Function to prefetch a specific page
    async function prefetchPage(pageFeed, pageMarket) {
      try {
        await fetchPage(pageFeed, pageMarket);
      } catch (error) {
        console.error('Error prefetching page:', error);
      }
    }

    // Function to prefetch adjacent pages
    function prefetchAdjacentPages() {
      const currentFeedPage = getCurrentPage('feed');
      const currentMarketPage = getCurrentPage('market');
      const totalFeedPages = getTotalPages('feed');
      const totalMarketPages = getTotalPages('market');

      // Prefetch next feed page
      if (currentFeedPage < totalFeedPages) {
        prefetchPage(currentFeedPage + 1, currentMarketPage);
      }

      // Prefetch next market page
      if (currentMarketPage < totalMarketPages) {
        prefetchPage(currentFeedPage, currentMarketPage + 1);
      }
    }

    // Function to load new content (market and feed)
    async function loadPage(pageFeed, pageMarket) {
      try {
        // Get the content (from cache or fetch)
        const html = await fetchPage(pageFeed, pageMarket);

        // Update the left container with the new partial HTML
        leftContainer.innerHTML = html;

        // Get the new total pages values
        const totalPagesFeed = getTotalPages('feed');
        const totalPagesMarket = getTotalPages('market');

        // Update pagination controls
        updatePaginationControls(pageFeed, pageMarket, totalPagesFeed, totalPagesMarket);

        // Start prefetching the next pages after a short delay
        setTimeout(prefetchAdjacentPages, 100);

      } catch (error) {
        console.error('Error loading page:', error);
      }
    }

    // Event delegation for pagination buttons
    document.addEventListener('click', function(event) {
      const button = event.target.closest('button');
      if (!button) return;

      if (button.classList.contains('first-feed') || button.classList.contains('previous-feed') ||
          button.classList.contains('next-feed') || button.classList.contains('last-feed')) {
        const pageFeed = parseInt(button.dataset.page);
        const pageMarket = getCurrentPage('market'); // Keep current market page
        loadPage(pageFeed, pageMarket);
      }
      else if (button.classList.contains('first-market') || button.classList.contains('previous-market') ||
               button.classList.contains('next-market') || button.classList.contains('last-market')) {
        const pageMarket = parseInt(button.dataset.page);
        const pageFeed = getCurrentPage('feed'); // Keep current feed page
        loadPage(pageFeed, pageMarket);
      }
    });

    // Start prefetching adjacent pages on initial load
    setTimeout(prefetchAdjacentPages, 100);
  });
</script>
